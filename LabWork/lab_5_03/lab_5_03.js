const boardElement = document.getElementById('board');
const startButton = document.getElementById('start-button');
const rowsInput = document.getElementById('rows');
const colsInput = document.getElementById('cols');
const minesInput = document.getElementById('mines');
const messageElement = document.getElementById('message');

let board = [];
let mines = [];
let revealedCells = 0;
let flagsRemaining = 0;
let gameOver = false; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function createBoard(rows, cols, minesCount) {
    board = Array.from({ length: rows }, () => Array(cols).fill(0));
    mines = [];
    flagsRemaining = minesCount; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–ª–∞–∂–∫–æ–≤
    gameOver = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã

    while (mines.length < minesCount) {
        const row = Math.floor(Math.random() * rows);
        const col = Math.floor(Math.random() * cols);
        
        if (!mines.some(mine => mine.row === row && mine.col === col)) {
            mines.push({ row, col });
            board[row][col] = 'M';
        }
    }

    for (let mine of mines) {
        const { row, col } = mine;
        for (let r = row - 1; r <= row + 1; r++) {
            for (let c = col - 1; c <= col + 1; c++) {
                if (r >= 0 && r < rows && c >= 0 && c < cols && board[r][c] !== 'M') {
                    board[r][c]++;
                }
            }
        }
    }

    renderBoard();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderBoard() {
    boardElement.innerHTML = '';
    
    for (let r = 0; r < board.length; r++) {
        for (let c = 0; c < board[r].length; c++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.row = r;
            cell.dataset.col = c;

            cell.addEventListener('click', () => revealCell(r, c));
            cell.addEventListener('contextmenu', (e) => {
                e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                toggleFlag(r, c);
            });

            boardElement.appendChild(cell);
        }
    }

    boardElement.style.gridTemplateColumns = `repeat(${board[0].length}, auto)`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–ª–µ—Ç–∫–∏
function revealCell(row, col) {
    if (gameOver) return; // –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    const cellValue = board[row][col];
    
    if (cellValue === 'M') {
        messageElement.textContent = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –º–∏–Ω—É!';
        revealAllMines();
        gameOver = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ "–æ–∫–æ–Ω—á–µ–Ω–æ"
        return;
    }

    const cellElement = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    
    if (!cellElement.classList.contains('revealed')) {
        cellElement.classList.add('revealed');
        
        if (cellValue > 0) {
            cellElement.textContent = cellValue;
            cellElement.style.color = getColorForNumber(cellValue);
        } else {
            cellElement.textContent = '';
        }

        revealedCells++;

        if (cellValue === 0) {
            openAdjacentCells(row, col);
        }

        if (revealedCells === (board.length * board[0].length - mines.length)) {
            messageElement.textContent = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!';
            gameOver = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ "–æ–∫–æ–Ω—á–µ–Ω–æ"
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏—è —Ñ–ª–∞–∂–∫–∞
function toggleFlag(row, col) {
    const cellElement = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
    
    if (!gameOver) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        if (cellElement.classList.contains('flagged')) {
            // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–∂–æ–∫
            if (cellElement.classList.contains('revealed')) {
                removeFlagFromRevealedCell(cellElement, row, col);
            } else {
                removeFlagFromHiddenCell(cellElement);
            }
        } else if (flagsRemaining > 0) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–∂–æ–∫
            cellElement.classList.add('flagged');
            cellElement.textContent = 'üö©'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–∂–æ–∫
            flagsRemaining--;
        }

        messageElement.textContent = `–û—Å—Ç–∞–ª–æ—Å—å —Ñ–ª–∞–∂–∫–æ–≤: ${flagsRemaining}`;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–∂–∫–∞ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–ª–µ—Ç–∫–∏
function removeFlagFromRevealedCell(cellElement, row, col) {
    cellElement.classList.remove('flagged');
    flagsRemaining++;

    const cellValue = board[row][col];
    if (cellValue > 0) {
        cellElement.textContent = cellValue; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∏—Å–ª–æ
        cellElement.style.color = getColorForNumber(cellValue);
    } else {
        cellElement.textContent = ''; // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –Ω—É–ª—è
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Ñ–ª–∞–∂–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–æ–π –∫–ª–µ—Ç–∫–∏
function removeFlagFromHiddenCell(cellElement) {
    cellElement.classList.remove('flagged'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —Ñ–ª–∞–∂–∫–∞
    cellElement.textContent = ''; // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª–µ—Ç–∫–∏
    flagsRemaining++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–ª–∞–∂–∫–æ–≤
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–ª–µ—Ç–æ–∫
function openAdjacentCells(row, col) {
    for (let r = row - 1; r <= row + 1; r++) {
        for (let c = col - 1; c <= col + 1; c++) {
            if (r >= 0 && r < board.length && c >= 0 && c < board[0].length && !(r === row && c === col)) {
                revealCell(r, c);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –º–∏–Ω –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏
function revealAllMines() {
    for (let mine of mines) {
        const { row, col } = mine;
        const mineCell = document.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
        
        if (mineCell) {
            mineCell.classList.add('mine');
            mineCell.textContent = 'üí£'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
function getColorForNumber(num) {
    switch(num) {
        case 1: return 'blue';
        case 2: return 'green';
        case 3: return 'red';
        case 4: return 'darkblue';
        case 5: return 'brown';
        case 6: return 'cyan';
        case 7: return 'magenta';
        case 8: return 'black';
        default: return 'black'; // –î–ª—è –Ω—É–ª—è –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
startButton.addEventListener('click', () => {
    const rows = parseInt(rowsInput.value);
    const cols = parseInt(colsInput.value);
    const minesCount = parseInt(minesInput.value);

    if (minesCount >= rows * cols) {
        alert("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫!");
        return;
    }

    revealedCells = 0;
    messageElement.textContent = '';
    createBoard(rows, cols, minesCount);
});
